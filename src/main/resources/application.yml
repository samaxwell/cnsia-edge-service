
server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  cloud:
    gateway:
      httpclient:
        connection-timeout: 2000 # time limit for connection to be established
        response-timeout: 5s     # time limit for a response to be received
        pool:
          type: elastic # default. Could be 'fixed'
          # idle time after which the communication channel will be closed
          max-idle-time: 15s
          # time after which the communication channel will be closed
          max-life-time: 60s
      routes:
        - id: catalog-route
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books # env var or default
          predicates:
            - Path=/books/**
          filters:
            # filter name
            - name: CircuitBreaker
              args:
                # circuit breaker name
                name: catalogCircuitBreaker
                # forwards request to this UIR when circuit is open
                fallbackUri: forward:/catalog-fallback
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
          predicates:
            - Path=/orders/**
          filters:
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker
      default-filters:
        - name: Retry
          args:
            retries: 3
            methods: GET
            # retries only when 5XX errors
            series: SERVER_ERROR
            # retries only when the given exceptions are thrown
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
            # retries with a delay computed as "firstBackoff * (factor ^ n)"
            backoff:
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false
        # Redis uses 'token bucket algorithm' (p. 314)
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              # Number of tokens dripped in the bucket each second
              replenishRate: 10
              # allows request bursts of up to 20 requests
              burstCapacity: 20
              # how many tokens a request costs
              requestedTokens: 1

  data:
    redis:
      # time limit for connection to be established
      connect-timeout: 2s
      host: localhost
      port: 6379
      # time limit for response to be received
      timeout: 1s

resilience4j:
  circuitbreaker:
    configs:
      # default configuration bean for all circuit breakers
      default:
        # size of the sliding window used to record the outcome
        # of calls when the circuit is closed
        slidingWindowSize: 20
        # # of permitted calls when in half-open state
        permittedNumberOfCallsInHalfOpenState: 5
        failureRateThreshold: 50
        # wait time before moving from open to half-open (ms)
        wait-duration-in-open-state: 15000
  timelimiter:
    configs:
      default:
        # overrides spring.cloud.gateway.httpclient.response-timeout
        timeout-duration: 5s

logging:
  level:
    io.github.resilience4j: DEBUG